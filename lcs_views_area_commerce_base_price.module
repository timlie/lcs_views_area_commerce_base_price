<?php
/**
* @file
* Views area handler for getting the base prices of the line items instead of the
* calculated prices.
*/

/**
 * Implements hook_menu().
 */
function lcs_views_area_commerce_base_price_menu() {
  $items = array();

  $items['createquote'] = array(
    'title' => 'Create quote',
    'page callback' => 'lcs_views_area_commerce_base_price_create_quote',
    'access arguments' => array('create quote'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function lcs_views_area_commerce_base_price_block_info() {
  $blocks['quick_buy_admin_cart'] = array(
    'info' => t('Quick buy admin cart'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lcs_views_area_commerce_base_price_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'quick_buy_admin_cart':
      global $user;

      if ($order = commerce_cart_order_load($user->uid)) {
        $wrapper = entity_metadata_wrapper('commerce_order', $order);
        // Only invoke the event if we found product line items.
        if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
          $line_items = $wrapper->commerce_line_items;
          $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
          $total = commerce_line_items_total($line_items);
          $total_deliverer = lcs_views_area_commerce_base_price_line_items_total($line_items);
          $currency = commerce_currency_load($total['currency_code']);
          $total_profit_amount = $total['amount'] - $total_deliverer['amount'];
          // Calculate profit over deliverer price
          $total_profit_percentage = ($total_profit_amount / $total_deliverer['amount']) * 100;

          foreach (commerce_line_item_summary_links() as $name => $link) {
            if ($link['access']) {
              $links[str_replace('_', '-', 'line-item-summary-' . $name)] = $link;
            }
          }
        }
        else {
          $line_items = NULL;
          $quantity = 0;
          $total = NULL;
          $total_deliverer = NULL;
          $currency = NULL;
          $total_profit_amount = NULL;
          $total_profit_percentage = NULL;
        }
      }
      else {
        return t("No order created.");
      }
      $block['subject'] = t('Shopping cart');
      $block['content'] = theme('lcs_views_area_commerce_line_item_summary', array(
        'quantity_raw' => $quantity,
        'quantity_label' => format_plural($quantity, 'item', 'items', array(), array('context' => 'product count on a Commerce order')),
        'quantity' => format_plural($quantity, '1 item', '@count items', array(), array('context' => 'product count on a Commerce order')),
        'total_raw' => number_format(commerce_currency_round($total['amount'], $currency), $currency['decimals']),
        'total_label' => t('Total customer:'),
        'total' => commerce_currency_format($total['amount'], $total['currency_code']),
        'totaldelivery_raw' => number_format(commerce_currency_round($total_deliverer['amount'], $currency), $currency['decimals']),
        'totaldelivery_label' => t('Total deliverer:'),
        'totaldelivery' => commerce_currency_format($total_deliverer['amount'], $total_deliverer['currency_code']),
        'totalprofitamount_raw' => number_format(commerce_currency_round($total_profit_amount, $currency), $currency['decimals']),
        'totalprofitamount_label' => t('Total profit amount:'),
        'totalprofitamount' => commerce_currency_format($total_profit_amount, $total['currency_code']),
        'totalprofitpercentage_raw' => number_format($total_profit_percentage,2) . '%',
        'totalprofitpercentage_label' => t('Total profit percentage:'),
        'totalprofitpercentage' => number_format($total_profit_percentage,2) . '%',
        'links' => theme('links', array('links' => $links, 'attributes' => array('class' => array('links', 'inline')))),
      ));

      drupal_add_css(drupal_get_path('module', 'lcs_views_area_commerce_base_price') . '/css/lcs_views_area_commerce_base_price.css');

      break;
  }

  return $block;
}


/**
 * Loads order and invokes rules event to create quote from this order.
 */
function lcs_views_area_commerce_base_price_create_quote() {
  global $user;

  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    // Only invoke the event if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
      $quotecreation = rules_invoke_event('lcs_quote_commerce_cart_get_quote', $wrapper);
      // The hook_menu does not accept the redirect from rules. We store it in a
      // variable and send it manually with drupal_goto()
      drupal_goto($quotecreation);
    }
    else {
      return t("No products in cart.");
    }
  }
  else {
    return t("No order created.");
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info().
 */
function lcs_views_area_commerce_base_price_commerce_line_item_summary_link_info() {
  return array(
    'createquote' => array(
      'title' => t('Create quote'),
      'href' => 'createquote',
      'attributes' => array('rel' => 'nofollow'),
      'weight' => 0,
    ),
  );
}

/**
 * Create total amount for line items with base prices.
 * This code is copied (almost, now with own calculation) from commerce_line_items_total()
 */
function lcs_views_area_commerce_base_price_line_items_total($line_items, $types = array()) {
  // First determine the currency to use for the order total. This code has
  // been copied and modifed from commerce_order_calculate_total(). It is worth
  // considering abstracting this code into a separate API function that both
  // functions can use.
  $currency_code = commerce_default_currency();
  $currencies = array();

  // Populate an array of how many line items on the order use each currency.
  foreach ($line_items as $delta => $line_item_wrapper) {
    // Convert the line item to a wrapper if necessary.
    if (!$line_item_wrapper instanceof EntityMetadataWrapper) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_wrapper);
    }

    $line_item_currency_code = $line_item_wrapper->commerce_total->currency_code->value();

    if (!in_array($line_item_currency_code, array_keys($currencies))) {
      $currencies[$line_item_currency_code] = 1;
    }
    else {
      $currencies[$line_item_currency_code]++;
    }
  }

  reset($currencies);

  // If only one currency is present, use that to calculate the total.
  if (count($currencies) == 1) {
    $currency_code = key($currencies);
  }
  elseif (in_array(commerce_default_currency(), array_keys($currencies))) {
    // Otherwise use the site default currency if it's in the array.
    $currency_code = commerce_default_currency();
  }
  elseif (count($currencies) > 1) {
    // Otherwise use the first currency in the array.
    $currency_code = key($currencies);
  }

  // Sum up the total price of all matching line items.
  $total = 0;

  foreach ($line_items as $line_item_wrapper) {
    // Convert the line item to a wrapper if necessary.
    if (!$line_item_wrapper instanceof EntityMetadataWrapper) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_wrapper);
    }

    if (empty($types) || in_array($line_item_wrapper->type->value(), $types)) {
      // Own code
      //dpm($line_item_wrapper->commerce_total->value());
      $price_components = $line_item_wrapper->commerce_total->data->value();
      $base_price_total = $price_components['components'][0]['price']['amount'];
      //dpm($base_price);
      $total += commerce_currency_convert(
        $base_price_total,
        $line_item_wrapper->commerce_total->currency_code->value(),
        $currency_code
      );
    }
  }

  return array('amount' => $total, 'currency_code' => $currency_code);
}

/**
 * Implements hook_theme().
 */
function lcs_views_area_commerce_base_price_theme() {
  return array(
    'lcs_views_area_commerce_line_item_summary' => array(
      'variables' => array(
        'quantity_raw' => NULL,
        'quantity_label' => NULL,
        'quantity' => NULL,
        'total_raw' => NULL,
        'total' => NULL,
        'totaldelivery_raw' => NULL,
        'totaldelivery' => NULL,
        'totalprofitamount_raw' => NULL,
        'totalprofitamount' => NULL,
        'totalprofitpercentage_raw' => NULL,
        'totalprofitpercentage' => NULL,
        'links' => NULL,
        'view' => NULL,
      ),
      'path' => drupal_get_path('module', 'lcs_views_area_commerce_base_price') . '/theme',
      'template' => 'commerce-line-item-summary-base-prices',
    ),
  );
}
